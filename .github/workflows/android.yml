name: Android CI

on:
  push:
    branches: "new-release-flow"


env:
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  RELEASE_SIGN_KEY_ALIAS: ${{ secrets.RELEASE_SIGN_KEY_ALIAS }}
  RELEASE_SIGN_KEY_PASSWORD: ${{ secrets.RELEASE_SIGN_KEY_PASSWORD }}

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: release

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Create google-services.json
        run: cat /home/runner/work/sgo-app/sgo-app/app/google-services.json | base64

      - name: Putting data into google-services.json
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $DATA > /home/runner/work/sgo-app/sgo-app/app/google-services.json

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_FILE }}
        run: |
          TMP_KEYSTORE_FILE_PATH=/home/runner/work/sgo-app/sgo-app/app/keystore
          mkdir "${TMP_KEYSTORE_FILE_PATH}"
          echo $ENCODED_STRING | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/mezhendosina_key.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew assembleRelease --stacktrace

      - name: Get built APK
        uses: actions/upload-artifact@v2
        with:
          name: SGO app.apk
          path: /home/runner/work/sgo-app/sgo-app/app/build/outputs/apk/release/app-release.apk

  get-apk-version:
    needs: build-apk
    runs-on: ubuntu-latest
    outputs:
      apk-version-name: ${{ steps.apk-info.outputs.version-name }}
    steps:
      - name: Get APK
        uses: actions/download-artifact@v3
        with:
          name: SGO app.apk
          path: /home/runner/work/sgo-app/SGO app.apk
      - name: Get apk info
        id: apk-info
        uses: mezhendosina/apk-info-action@0.0.1
        with:
          apk-path: home/runner/work/sgo-app/SGO app.apk

  prepare-release-notes:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.getRelease.outputs.release }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: new-release-flow

      - name: Read RELEASE.md file
        id: getRelease
        run: echo "release=$(cat /home/runner/work/sgo-app/sgo-app/RELEASE_NOTES.md)" >> $GITHUB_OUTPUT

  send-to-channel:
    needs: [ prepare-release-notes, get-apk-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Get APK
        uses: actions/download-artifact@v3
        with:
          name: SGO app.apk
          path: /home/runner/work/sgo-app/SGO app.apk

      - name: Send release notes to Telegram channel
        run: curl -F chat_id=-1001770660386 -F parse_mode=Markdown -F text="**Доступна новая версия приложения**:\ *${{ needs.get-apk-version.outputs.apk-version-name }}*\n\n${{ needs.prepare-release-notes.outputs.release-notes }}" https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendMessage
      - name: Send file to Telegram channel
        run: curl -F document=@"/home/runner/work/sgo-app/SGO app.apk" https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendDocument?chat_id=-1001770660386

#
#      - name: Create Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.app-version.outputs.appVersionName }}
#          release_name: ${{ steps.app-version.outputs.appVersionName }}
#          body: ${{ steps.getRelease.outputs.release }}
